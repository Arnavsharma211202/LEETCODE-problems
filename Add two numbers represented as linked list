/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverse(ListNode *head){
        ListNode *curr=head;
        ListNode *next=NULL;
        ListNode *prev=NULL;
        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    int countdigits(ListNode *head){
        ListNode *temp=head;
        int count=0;
        while(temp!=NULL){
            count++;
            temp=temp->next;
        }
        return count;
    }
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

        if(countdigits(l1)<countdigits(l2)){
            ListNode *temp=l1;
            l1=l2;
            l2=temp;
        }

        int carry=0;
        ListNode *head=l1;

        while(l2!=NULL){
            l1->val+=l2->val+carry;
            carry=l1->val/10;;
            l1->val%=10;

            if(l1->next==NULL && carry>0){
                ListNode *newnode=new ListNode (carry);
                l1->next=newnode;
                l1=newnode;
                carry=0;
                break;
            }
            l1=l1->next;
            l2=l2->next;
        }
        
        while(l1!=NULL){
            l1->val+=carry;
            carry=l1->val/10;
            l1->val%=10;

            if(l1->next==NULL && carry>0){
                ListNode *newnode=new ListNode(carry);
                l1->next=newnode;
                l1=newnode;
            }
            l1=l1->next;
        }
    return head;


        
    }
};
