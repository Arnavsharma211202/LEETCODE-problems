class Solution {
public:
    vector<int>prevsmall(vector<int> heights,int n){
        vector<int>ans;
        stack<int>st;
        st.push(-1);
        for(int i=0;i<n;i++){
            int curr=heights[i];
            while( st.top()!=-1 && curr <= heights[st.top()]){
                st.pop();
            }
            ans.push_back(st.top());
            st.push(i);
        }
        return ans;
    }
    vector<int>nextsmall(vector<int> heights,int n){
        vector<int>ans(n);
        stack<int>st;
        st.push(-1);
        for(int i =n-1;i>=0;i--){
            int curr=heights[i];
            while(st.top()!=-1 && curr <= heights[st.top()]){
                st.pop();
            }
            ans[i]=st.top();
            st.push(i);
        }
        return ans;
    }
    int largestRectangleArea(vector<int>& heights) {
    int n=heights.size();
    vector<int>prev(n);
    prev=prevsmall(heights,n);
    vector<int>next(n);
    next=nextsmall(heights,n);
    int area=-1;
    for(int i=0;i<n;i++){
        int curr=heights[i];
        if(next[i]==-1)
        next[i]=n;
        int breadth=next[i]-prev[i]-1;
        int newarea=curr*breadth;
        if(newarea>area)
        area=newarea;

    }
    return area;}
};
