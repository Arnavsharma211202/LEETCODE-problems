/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int length(ListNode*head){
        if(head==NULL)
        return 0;
        return 1+length(head->next);
    }
    ListNode *reverse(ListNode *head,int k,int r){
        if(r==0)
        return head;
        if(k==0)
        return head;

        ListNode *curr=head,*next=NULL,*prev=NULL;
        int count=0;
        while(curr!=NULL && count<k){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
            count++;
        }

        if(next!=NULL){
            head->next=reverse(next,k,r-1);

        }
        return prev;

    }
    ListNode* reverseKGroup(ListNode* head, int k) {
     int count=length(head);
     int r=count/k;
     return reverse(head,k,r);
     }
    
};
