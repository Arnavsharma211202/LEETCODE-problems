/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
ListNode *reverse(ListNode *head){
    if(head==NULL|| head->next==NULL)
    return head;

    ListNode *prev=NULL,*curr=head,*next=NULL;
    while(curr!=NULL){
        next=curr->next;
        curr->next=prev;
        prev=curr;
        curr=next;
    }
    return prev;
}
    bool isPalindrome(ListNode* head) {
        if(head->next==NULL)
        return true;
         ListNode *slow=head,*fast=head,*prev=NULL;
        while(fast->next!=NULL && fast->next->next!=NULL){
            prev=slow;
            slow=slow->next;
            fast=fast->next->next;
        }
        ListNode *rhead=NULL;
        if(fast->next==NULL){
            rhead=prev->next->next;
            prev->next=NULL;
        }
        else{
            rhead=slow->next;
            slow->next=NULL;
        }
        rhead=reverse(rhead);
        ListNode *t1=head,*t2=rhead;
        while(t1!=NULL){
            if(t1->val==t2->val){
                t1=t1->next;
                t2=t2->next;
            }
            else{
                return false;
                break;
            }
        }
        return true;
    }
};
