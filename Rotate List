/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    int length(ListNode *head){
        ListNode *temp=head;
        int count=0;
        while(temp!=NULL){
            count++;
            temp=temp->next;
        }
        return count;
    }
    ListNode *reverse(ListNode *head){
        if(head==NULL || head->next==NULL)
        return head;
        
        ListNode *curr=head;
        ListNode*prev=NULL;
        ListNode *next=NULL;
        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    ListNode* rotateRight(ListNode* head, int k) {
        int l=length(head);
        if(head==NULL || head->next==NULL || k==0)
        return head;
        if(k>l)
        k=k%l;
        if(k==0)
        return head;
        if(k==l)
        return head;

        head=reverse(head);
        ListNode *temp=head;
        int count=0;
        while(count<k-1){
            count++;
            temp=temp->next;
        }
        ListNode *newhead=temp->next;
        temp->next=NULL;
        
        head=reverse(head);
        newhead=reverse(newhead);

        temp=head;
        while(temp->next!=NULL)
        temp=temp->next;

        temp->next=newhead;

        return head;
    }
};
